<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>Json Box: include/JsonBox/Value.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Json Box
   &#160;<span id="projectnumber">0.6.1</span>
   </div>
   <div id="projectbrief">This is a JSON C++ library. It can write and read JSON files with ease and speed.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.htm">include</a></li><li class="navelem"><a class="el" href="dir_0c59acc592fd5ff7f116eef098965cb8.htm">JsonBox</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Value.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_value_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#ifndef JB_VALUE_H</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#define JB_VALUE_H</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;Export.h&quot;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespace_json_box.htm">JsonBox</a> {</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    <span class="keyword">class </span>Array;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    <span class="keyword">class </span>Object;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    <span class="keyword">class </span>Value;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    JSONBOX_EXPORT std::ostream &amp;<a class="code" href="namespace_json_box.htm#a5126bcbc4c7ddcc1e28ee07e41c7e603">operator&lt;&lt;</a>(std::ostream &amp;output, <span class="keyword">const</span> Value &amp;v);</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm">   27</a></span>&#160;    <span class="keyword">class </span>JSONBOX_EXPORT <a class="code" href="class_json_box_1_1_value.htm">Value</a> {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keyword">friend</span> std::ostream &amp;<a class="code" href="namespace_json_box.htm#a5126bcbc4c7ddcc1e28ee07e41c7e603">operator&lt;&lt;</a>(std::ostream &amp;output, <span class="keyword">const</span> <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;v);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8">   43</a></span>&#160;        <span class="keyword">enum</span> <a class="code" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8">Type</a> {</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8afab8bf05e2a55bebfa7e0ba34d4fd7b1">   44</a></span>&#160;            <a class="code" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8afab8bf05e2a55bebfa7e0ba34d4fd7b1">STRING</a>,</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8ac5ae8b67a9e7fd45b63eac0f9551c119">   45</a></span>&#160;            <a class="code" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8ac5ae8b67a9e7fd45b63eac0f9551c119">INTEGER</a>,</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8aa626b7e73a436622b83d2788ef73715c">   46</a></span>&#160;            <a class="code" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8aa626b7e73a436622b83d2788ef73715c">DOUBLE</a>,</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8a1482e68031a5072c6f8fef5cbbfc6aa2">   47</a></span>&#160;            <a class="code" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8a1482e68031a5072c6f8fef5cbbfc6aa2">OBJECT</a>,</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8a208fc49121ff228663d938fdb8fa4955">   48</a></span>&#160;            <a class="code" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8a208fc49121ff228663d938fdb8fa4955">ARRAY</a>,</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8ac8a22edba2716ff153b682c19580bc77">   49</a></span>&#160;            <a class="code" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8ac8a22edba2716ff153b682c19580bc77">BOOLEAN</a>,</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8a047ee17e3ffa911ab48cec228ec4bd2e">   50</a></span>&#160;            <a class="code" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8a047ee17e3ffa911ab48cec228ec4bd2e">NULL_VALUE</a>,</div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8a7f44ce11c336f6fb771a9d9f4a718bbd">   51</a></span>&#160;            UNKNOWN</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        };</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">static</span> std::string escapeMinimumCharacters(<span class="keyword">const</span> std::string &amp;str);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">static</span> std::string escapeAllCharacters(<span class="keyword">const</span> std::string &amp;str);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::string escapeToUnicode(<span class="keywordtype">char</span> charToEscape);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a>();</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a>(std::istream &amp;input);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a>(<span class="keyword">const</span> std::string &amp;newString);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *newCString);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a>(<span class="keywordtype">int</span> newInt);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a>(<span class="keywordtype">double</span> newDouble);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a>(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;newObject);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a>(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_array.htm">Array</a> &amp;newArray);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a>(<span class="keywordtype">bool</span> newBoolean);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a>(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;src);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        ~<a class="code" href="class_json_box_1_1_value.htm">Value</a>();</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;src);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;operator=(<span class="keyword">const</span> std::string &amp;src);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;operator=(<span class="keyword">const</span> <span class="keywordtype">char</span> *src);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;operator=(<span class="keywordtype">int</span> src);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;operator=(<span class="keywordtype">double</span> src);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;src);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_array.htm">Array</a> &amp;src);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;operator=(<span class="keywordtype">bool</span> src);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;rhs) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;rhs) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordtype">bool</span> operator &lt;(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;rhs) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordtype">bool</span> operator &lt;=(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;rhs) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordtype">bool</span> operator &gt;(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;rhs) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordtype">bool</span> operator &gt;=(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;rhs) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;operator[](<span class="keyword">const</span> std::string &amp;key);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;operator[](<span class="keyword">const</span> <span class="keywordtype">char</span> *key);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;operator[](<span class="keywordtype">size_t</span> index);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        Type getType() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keywordtype">bool</span> isString() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keywordtype">bool</span> isStringable() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordtype">bool</span> isInteger() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordtype">bool</span> isDouble() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordtype">bool</span> isNumeric() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keywordtype">bool</span> isObject() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="keywordtype">bool</span> isArray() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordtype">bool</span> isBoolean() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keywordtype">bool</span> isNull() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keyword">const</span> std::string &amp;getString() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="keyword">const</span> std::string &amp;tryGetString(<span class="keyword">const</span> std::string &amp;defaultValue) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="keyword">const</span> std::string getToString() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keywordtype">void</span> setString(<span class="keyword">const</span> std::string &amp;newString);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keywordtype">int</span> getInteger() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keywordtype">int</span> tryGetInteger(<span class="keywordtype">int</span> defaultValue) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordtype">void</span> setInteger(<span class="keywordtype">int</span> newInt);</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="keywordtype">double</span> getDouble() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="keywordtype">double</span> tryGetDouble(<span class="keywordtype">double</span> defaultValue) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="keywordtype">float</span> getFloat() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="keywordtype">float</span> tryGetFloat(<span class="keywordtype">float</span> defaultValue) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordtype">void</span> setDouble(<span class="keywordtype">double</span> newDouble);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;getObject() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="keywordtype">void</span> setObject(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;newObject);</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        <span class="keyword">const</span> <a class="code" href="class_json_box_1_1_array.htm">Array</a> &amp;getArray() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <span class="keywordtype">void</span> setArray(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_array.htm">Array</a> &amp;newArray);</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keywordtype">bool</span> getBoolean() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordtype">bool</span> tryGetBoolean(<span class="keywordtype">bool</span> defaultValue) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <span class="keywordtype">void</span> setBoolean(<span class="keywordtype">bool</span> newBoolean);</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <span class="keywordtype">void</span> setNull();</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        <span class="keywordtype">void</span> loadFromString(<span class="keyword">const</span> std::string &amp;json);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <span class="keywordtype">void</span> loadFromStream(std::istream &amp;input);</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        <span class="keywordtype">void</span> loadFromFile(<span class="keyword">const</span> std::string &amp;filePath);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="keywordtype">void</span> writeToStream(std::ostream &amp;output, <span class="keywordtype">bool</span> indent = <span class="keyword">true</span>,</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                           <span class="keywordtype">bool</span> escapeAll = <span class="keyword">false</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="keywordtype">void</span> writeToFile(<span class="keyword">const</span> std::string &amp;filePath, <span class="keywordtype">bool</span> indent = <span class="keyword">true</span>,</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                         <span class="keywordtype">bool</span> escapeAll = <span class="keyword">false</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00561"></a><span class="lineno"><a class="line" href="union_json_box_1_1_value_1_1_value_data_pointer.htm">  561</a></span>&#160;        <span class="keyword">union </span><a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm">ValueDataPointer</a> {</div>
<div class="line"><a name="l00562"></a><span class="lineno"><a class="line" href="union_json_box_1_1_value_1_1_value_data_pointer.htm#a6b2dde21ad62f22838c9bb61f704c7c7">  562</a></span>&#160;            std::string *<a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm#a6b2dde21ad62f22838c9bb61f704c7c7">stringValue</a>;</div>
<div class="line"><a name="l00563"></a><span class="lineno"><a class="line" href="union_json_box_1_1_value_1_1_value_data_pointer.htm#acd711d2007148a666435e935ca0b0863">  563</a></span>&#160;            <span class="keywordtype">int</span> *<a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm#acd711d2007148a666435e935ca0b0863">intValue</a>;</div>
<div class="line"><a name="l00564"></a><span class="lineno"><a class="line" href="union_json_box_1_1_value_1_1_value_data_pointer.htm#a24f9fcaa0e3dfbf91d5bd4f2a05ced0a">  564</a></span>&#160;            <span class="keywordtype">double</span> *<a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm#a24f9fcaa0e3dfbf91d5bd4f2a05ced0a">doubleValue</a>;</div>
<div class="line"><a name="l00565"></a><span class="lineno"><a class="line" href="union_json_box_1_1_value_1_1_value_data_pointer.htm#a6fc48cb08dd85e65d07e175e3041a927">  565</a></span>&#160;            <a class="code" href="class_json_box_1_1_object.htm">Object</a> *<a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm#a6fc48cb08dd85e65d07e175e3041a927">objectValue</a>;</div>
<div class="line"><a name="l00566"></a><span class="lineno"><a class="line" href="union_json_box_1_1_value_1_1_value_data_pointer.htm#a473379ef36bb16e3506550d87697139f">  566</a></span>&#160;            <a class="code" href="class_json_box_1_1_array.htm">Array</a> *<a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm#a473379ef36bb16e3506550d87697139f">arrayValue</a>;</div>
<div class="line"><a name="l00567"></a><span class="lineno"><a class="line" href="union_json_box_1_1_value_1_1_value_data_pointer.htm#ae3e0eb54ebe81b4ad18cdb19425f2d63">  567</a></span>&#160;            <span class="keywordtype">bool</span> *<a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm#ae3e0eb54ebe81b4ad18cdb19425f2d63">boolValue</a>;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            <a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm">ValueDataPointer</a>();</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            <a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm">ValueDataPointer</a>(std::string *newStringValue);</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            <a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm">ValueDataPointer</a>(<span class="keywordtype">int</span> *newIntValue);</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm">ValueDataPointer</a>(<span class="keywordtype">double</span> *newDoubleValue);</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm">ValueDataPointer</a>(<a class="code" href="class_json_box_1_1_object.htm">Object</a> *newObjectValue);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            <a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm">ValueDataPointer</a>(<a class="code" href="class_json_box_1_1_array.htm">Array</a> *newArrayValue);</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            <a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm">ValueDataPointer</a>(<span class="keywordtype">bool</span> *newBoolValue);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        };</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div>
<div class="line"><a name="l00616"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#ae6ab332adeac1ac536add7f54c1cfebf">  616</a></span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::string <a class="code" href="class_json_box_1_1_value.htm#ae6ab332adeac1ac536add7f54c1cfebf">EMPTY_STRING</a>;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div>
<div class="line"><a name="l00623"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a5a475fb9b2740ba60c4d5bd5e7b78c43">  623</a></span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> EMPTY_INT = 0;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div>
<div class="line"><a name="l00630"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a2b6d473f56d80158bc7e11309dfec44a">  630</a></span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="class_json_box_1_1_value.htm#a2b6d473f56d80158bc7e11309dfec44a">EMPTY_DOUBLE</a>;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div>
<div class="line"><a name="l00637"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#aeeccd94a1a1c5754506e9add43cfe24a">  637</a></span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> <a class="code" href="class_json_box_1_1_value.htm#aeeccd94a1a1c5754506e9add43cfe24a">EMPTY_OBJECT</a>;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a299fcb9fb2f29c8a7858d55a5b7a3fb1">  644</a></span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="class_json_box_1_1_array.htm">Array</a> <a class="code" href="class_json_box_1_1_value.htm#a299fcb9fb2f29c8a7858d55a5b7a3fb1">EMPTY_ARRAY</a>;</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div>
<div class="line"><a name="l00651"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a3b3d0bbab129cee0a32af0aad4c88964">  651</a></span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> EMPTY_BOOL = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">bool</span> isHexDigit(<span class="keywordtype">char</span> digit);</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">bool</span> isWhiteSpace(<span class="keywordtype">char</span> whiteSpace);</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> readString(std::istream &amp;input, std::string &amp;result);</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> readObject(std::istream &amp;input, <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;result);</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> readArray(std::istream &amp;input, <a class="code" href="class_json_box_1_1_array.htm">Array</a> &amp;result);</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> readNumber(std::istream &amp;input, <a class="code" href="class_json_box_1_1_value.htm">Value</a> &amp;result);</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> readToNonWhiteSpace(std::istream &amp;input,</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                                        <span class="keywordtype">char</span> &amp;currentCharacter);</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        <span class="keywordtype">void</span> clear();</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        <span class="keywordtype">void</span> output(std::ostream &amp;output, <span class="keywordtype">bool</span> indent = <span class="keyword">true</span>,</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                    <span class="keywordtype">bool</span> escapeAll = <span class="keyword">false</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div>
<div class="line"><a name="l00729"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#ad00c46542cd6f3c19eb9d7e1a19f7a60">  729</a></span>&#160;        <a class="code" href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8">Type</a> <a class="code" href="class_json_box_1_1_value.htm#ad00c46542cd6f3c19eb9d7e1a19f7a60">type</a>;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div>
<div class="line"><a name="l00734"></a><span class="lineno"><a class="line" href="class_json_box_1_1_value.htm#a80ca2fc7e9b17cb7849d647902a2eed3">  734</a></span>&#160;        <a class="code" href="union_json_box_1_1_value_1_1_value_data_pointer.htm">ValueDataPointer</a> <a class="code" href="class_json_box_1_1_value.htm#a80ca2fc7e9b17cb7849d647902a2eed3">data</a>;</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    };</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;}</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="class_json_box_1_1_value_htm_a0f7cb6073994b6b80d2cdc0a34a0e8b8"><div class="ttname"><a href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8">JsonBox::Value::Type</a></div><div class="ttdeci">Type</div><div class="ttdef"><b>Definition:</b> Value.h:43</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_a0f7cb6073994b6b80d2cdc0a34a0e8b8ac5ae8b67a9e7fd45b63eac0f9551c119"><div class="ttname"><a href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8ac5ae8b67a9e7fd45b63eac0f9551c119">JsonBox::Value::INTEGER</a></div><div class="ttdef"><b>Definition:</b> Value.h:45</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm"><div class="ttname"><a href="class_json_box_1_1_object.htm">JsonBox::Object</a></div><div class="ttdef"><b>Definition:</b> Object.h:19</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_aeeccd94a1a1c5754506e9add43cfe24a"><div class="ttname"><a href="class_json_box_1_1_value.htm#aeeccd94a1a1c5754506e9add43cfe24a">JsonBox::Value::EMPTY_OBJECT</a></div><div class="ttdeci">static const Object EMPTY_OBJECT</div><div class="ttdef"><b>Definition:</b> Value.h:637</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm"><div class="ttname"><a href="class_json_box_1_1_value.htm">JsonBox::Value</a></div><div class="ttdef"><b>Definition:</b> Value.h:27</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_a0f7cb6073994b6b80d2cdc0a34a0e8b8a1482e68031a5072c6f8fef5cbbfc6aa2"><div class="ttname"><a href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8a1482e68031a5072c6f8fef5cbbfc6aa2">JsonBox::Value::OBJECT</a></div><div class="ttdef"><b>Definition:</b> Value.h:47</div></div>
<div class="ttc" id="union_json_box_1_1_value_1_1_value_data_pointer_htm_a6b2dde21ad62f22838c9bb61f704c7c7"><div class="ttname"><a href="union_json_box_1_1_value_1_1_value_data_pointer.htm#a6b2dde21ad62f22838c9bb61f704c7c7">JsonBox::Value::ValueDataPointer::stringValue</a></div><div class="ttdeci">std::string * stringValue</div><div class="ttdef"><b>Definition:</b> Value.h:562</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_a80ca2fc7e9b17cb7849d647902a2eed3"><div class="ttname"><a href="class_json_box_1_1_value.htm#a80ca2fc7e9b17cb7849d647902a2eed3">JsonBox::Value::data</a></div><div class="ttdeci">ValueDataPointer data</div><div class="ttdef"><b>Definition:</b> Value.h:734</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_ae6ab332adeac1ac536add7f54c1cfebf"><div class="ttname"><a href="class_json_box_1_1_value.htm#ae6ab332adeac1ac536add7f54c1cfebf">JsonBox::Value::EMPTY_STRING</a></div><div class="ttdeci">static const std::string EMPTY_STRING</div><div class="ttdef"><b>Definition:</b> Value.h:616</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_a299fcb9fb2f29c8a7858d55a5b7a3fb1"><div class="ttname"><a href="class_json_box_1_1_value.htm#a299fcb9fb2f29c8a7858d55a5b7a3fb1">JsonBox::Value::EMPTY_ARRAY</a></div><div class="ttdeci">static const Array EMPTY_ARRAY</div><div class="ttdef"><b>Definition:</b> Value.h:644</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_a2b6d473f56d80158bc7e11309dfec44a"><div class="ttname"><a href="class_json_box_1_1_value.htm#a2b6d473f56d80158bc7e11309dfec44a">JsonBox::Value::EMPTY_DOUBLE</a></div><div class="ttdeci">static const double EMPTY_DOUBLE</div><div class="ttdef"><b>Definition:</b> Value.h:630</div></div>
<div class="ttc" id="namespace_json_box_htm_a5126bcbc4c7ddcc1e28ee07e41c7e603"><div class="ttname"><a href="namespace_json_box.htm#a5126bcbc4c7ddcc1e28ee07e41c7e603">JsonBox::operator&lt;&lt;</a></div><div class="ttdeci">JSONBOX_EXPORT std::ostream &amp; operator&lt;&lt;(std::ostream &amp;output, const Array &amp;a)</div><div class="ttdef"><b>Definition:</b> Array.cpp:175</div></div>
<div class="ttc" id="class_json_box_1_1_array_htm"><div class="ttname"><a href="class_json_box_1_1_array.htm">JsonBox::Array</a></div><div class="ttdef"><b>Definition:</b> Array.h:18</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_a0f7cb6073994b6b80d2cdc0a34a0e8b8afab8bf05e2a55bebfa7e0ba34d4fd7b1"><div class="ttname"><a href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8afab8bf05e2a55bebfa7e0ba34d4fd7b1">JsonBox::Value::STRING</a></div><div class="ttdef"><b>Definition:</b> Value.h:44</div></div>
<div class="ttc" id="union_json_box_1_1_value_1_1_value_data_pointer_htm_a6fc48cb08dd85e65d07e175e3041a927"><div class="ttname"><a href="union_json_box_1_1_value_1_1_value_data_pointer.htm#a6fc48cb08dd85e65d07e175e3041a927">JsonBox::Value::ValueDataPointer::objectValue</a></div><div class="ttdeci">Object * objectValue</div><div class="ttdef"><b>Definition:</b> Value.h:565</div></div>
<div class="ttc" id="union_json_box_1_1_value_1_1_value_data_pointer_htm"><div class="ttname"><a href="union_json_box_1_1_value_1_1_value_data_pointer.htm">JsonBox::Value::ValueDataPointer</a></div><div class="ttdef"><b>Definition:</b> Value.h:561</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_a0f7cb6073994b6b80d2cdc0a34a0e8b8aa626b7e73a436622b83d2788ef73715c"><div class="ttname"><a href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8aa626b7e73a436622b83d2788ef73715c">JsonBox::Value::DOUBLE</a></div><div class="ttdef"><b>Definition:</b> Value.h:46</div></div>
<div class="ttc" id="union_json_box_1_1_value_1_1_value_data_pointer_htm_a24f9fcaa0e3dfbf91d5bd4f2a05ced0a"><div class="ttname"><a href="union_json_box_1_1_value_1_1_value_data_pointer.htm#a24f9fcaa0e3dfbf91d5bd4f2a05ced0a">JsonBox::Value::ValueDataPointer::doubleValue</a></div><div class="ttdeci">double * doubleValue</div><div class="ttdef"><b>Definition:</b> Value.h:564</div></div>
<div class="ttc" id="namespace_json_box_htm"><div class="ttname"><a href="namespace_json_box.htm">JsonBox</a></div><div class="ttdef"><b>Definition:</b> Array.h:9</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_a0f7cb6073994b6b80d2cdc0a34a0e8b8a208fc49121ff228663d938fdb8fa4955"><div class="ttname"><a href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8a208fc49121ff228663d938fdb8fa4955">JsonBox::Value::ARRAY</a></div><div class="ttdef"><b>Definition:</b> Value.h:48</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_a0f7cb6073994b6b80d2cdc0a34a0e8b8ac8a22edba2716ff153b682c19580bc77"><div class="ttname"><a href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8ac8a22edba2716ff153b682c19580bc77">JsonBox::Value::BOOLEAN</a></div><div class="ttdef"><b>Definition:</b> Value.h:49</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_ad00c46542cd6f3c19eb9d7e1a19f7a60"><div class="ttname"><a href="class_json_box_1_1_value.htm#ad00c46542cd6f3c19eb9d7e1a19f7a60">JsonBox::Value::type</a></div><div class="ttdeci">Type type</div><div class="ttdef"><b>Definition:</b> Value.h:729</div></div>
<div class="ttc" id="union_json_box_1_1_value_1_1_value_data_pointer_htm_ae3e0eb54ebe81b4ad18cdb19425f2d63"><div class="ttname"><a href="union_json_box_1_1_value_1_1_value_data_pointer.htm#ae3e0eb54ebe81b4ad18cdb19425f2d63">JsonBox::Value::ValueDataPointer::boolValue</a></div><div class="ttdeci">bool * boolValue</div><div class="ttdef"><b>Definition:</b> Value.h:567</div></div>
<div class="ttc" id="union_json_box_1_1_value_1_1_value_data_pointer_htm_a473379ef36bb16e3506550d87697139f"><div class="ttname"><a href="union_json_box_1_1_value_1_1_value_data_pointer.htm#a473379ef36bb16e3506550d87697139f">JsonBox::Value::ValueDataPointer::arrayValue</a></div><div class="ttdeci">Array * arrayValue</div><div class="ttdef"><b>Definition:</b> Value.h:566</div></div>
<div class="ttc" id="union_json_box_1_1_value_1_1_value_data_pointer_htm_acd711d2007148a666435e935ca0b0863"><div class="ttname"><a href="union_json_box_1_1_value_1_1_value_data_pointer.htm#acd711d2007148a666435e935ca0b0863">JsonBox::Value::ValueDataPointer::intValue</a></div><div class="ttdeci">int * intValue</div><div class="ttdef"><b>Definition:</b> Value.h:563</div></div>
<div class="ttc" id="class_json_box_1_1_value_htm_a0f7cb6073994b6b80d2cdc0a34a0e8b8a047ee17e3ffa911ab48cec228ec4bd2e"><div class="ttname"><a href="class_json_box_1_1_value.htm#a0f7cb6073994b6b80d2cdc0a34a0e8b8a047ee17e3ffa911ab48cec228ec4bd2e">JsonBox::Value::NULL_VALUE</a></div><div class="ttdef"><b>Definition:</b> Value.h:50</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Apr 3 2015 23:56:53 for Json Box by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.9.1
</small></address>
</body>
</html>
