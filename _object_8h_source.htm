<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>Json Box: include/JsonBox/Object.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Json Box
   &#160;<span id="projectnumber">0.6.1</span>
   </div>
   <div id="projectbrief">This is a JSON C++ library. It can write and read JSON files with ease and speed.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.htm">include</a></li><li class="navelem"><a class="el" href="dir_0c59acc592fd5ff7f116eef098965cb8.htm">JsonBox</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Object.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_object_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#ifndef JB_OBJECT_H</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#define JB_OBJECT_H</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_value_8h.htm">Value.h</a>&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespace_json_box.htm">JsonBox</a> {</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    JSONBOX_EXPORT std::ostream &amp;<a class="code" href="namespace_json_box.htm#a5126bcbc4c7ddcc1e28ee07e41c7e603">operator&lt;&lt;</a>(std::ostream&amp; output, <span class="keyword">const</span> Object&amp; o);</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div>
<div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm">   19</a></span>&#160;    <span class="keyword">class </span>JSONBOX_EXPORT <a class="code" href="class_json_box_1_1_object.htm">Object</a> {</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#aadf8e44ece33131b4dc66e754861ef6f">   21</a></span>&#160;        <span class="keyword">typedef</span> std::map&lt;std::string, Value&gt; <a class="code" href="class_json_box_1_1_object.htm#aadf8e44ece33131b4dc66e754861ef6f">container</a>;</div>
<div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a6059e945d01f81527dccfef0c86e2f91">   22</a></span>&#160;        <span class="keyword">typedef</span> container::key_type <a class="code" href="class_json_box_1_1_object.htm#a6059e945d01f81527dccfef0c86e2f91">key_type</a>;</div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a797d470c48c6b0281709552bd2f9c0ab">   23</a></span>&#160;        <span class="keyword">typedef</span> container::mapped_type <a class="code" href="class_json_box_1_1_object.htm#a797d470c48c6b0281709552bd2f9c0ab">mapped_type</a>;</div>
<div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#aa0f5cdac313f9e63c965a1a291fa8164">   24</a></span>&#160;        <span class="keyword">typedef</span> container::value_type <a class="code" href="class_json_box_1_1_object.htm#aa0f5cdac313f9e63c965a1a291fa8164">value_type</a>;</div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a36fe38b4af40f3a0c4db734de46ab881">   25</a></span>&#160;        <span class="keyword">typedef</span> container::size_type <a class="code" href="class_json_box_1_1_object.htm#a36fe38b4af40f3a0c4db734de46ab881">size_type</a>;</div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#ac7639dbcd746783c3f591afec84ce5f8">   26</a></span>&#160;        <span class="keyword">typedef</span> container::difference_type <a class="code" href="class_json_box_1_1_object.htm#ac7639dbcd746783c3f591afec84ce5f8">difference_type</a>;</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a61664a7f7076b0d03ac2dd132242cdf5">   27</a></span>&#160;        <span class="keyword">typedef</span> container::key_compare <a class="code" href="class_json_box_1_1_object.htm#a61664a7f7076b0d03ac2dd132242cdf5">key_compare</a>;</div>
<div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a716b7bdad7264a8fe6ebbcc2f6472491">   28</a></span>&#160;        <span class="keyword">typedef</span> container::allocator_type <a class="code" href="class_json_box_1_1_object.htm#a716b7bdad7264a8fe6ebbcc2f6472491">allocator_type</a>;</div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a3a345b2cb61d47c4ff95d023285004d7">   29</a></span>&#160;        <span class="keyword">typedef</span> container::reference <a class="code" href="class_json_box_1_1_object.htm#a3a345b2cb61d47c4ff95d023285004d7">reference</a>;</div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#aaf4d7917fd2d7ac1f5541c77bd6ac9b3">   30</a></span>&#160;        <span class="keyword">typedef</span> container::const_reference <a class="code" href="class_json_box_1_1_object.htm#aaf4d7917fd2d7ac1f5541c77bd6ac9b3">const_reference</a>;</div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a1a6edfd0989da0b09b711e051a34e6b3">   31</a></span>&#160;        <span class="keyword">typedef</span> container::pointer <a class="code" href="class_json_box_1_1_object.htm#a1a6edfd0989da0b09b711e051a34e6b3">pointer</a>;</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a2effd337c3d0407c3d0949744f2c5545">   32</a></span>&#160;        <span class="keyword">typedef</span> container::const_pointer <a class="code" href="class_json_box_1_1_object.htm#a2effd337c3d0407c3d0949744f2c5545">const_pointer</a>;</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a890f6abe2e10996f95c0741fd5922109">   33</a></span>&#160;        <span class="keyword">typedef</span> container::iterator <a class="code" href="class_json_box_1_1_object.htm#a890f6abe2e10996f95c0741fd5922109">iterator</a>;</div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a4d23817b5d11f016245351ccd4a5d7e2">   34</a></span>&#160;        <span class="keyword">typedef</span> container::const_iterator <a class="code" href="class_json_box_1_1_object.htm#a4d23817b5d11f016245351ccd4a5d7e2">const_iterator</a>;</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a0af500e05499df07492b7a05cb08e324">   35</a></span>&#160;        <span class="keyword">typedef</span> container::reverse_iterator <a class="code" href="class_json_box_1_1_object.htm#a0af500e05499df07492b7a05cb08e324">reverse_iterator</a>;</div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#aa2817625fc0517506fa48b1d83ec4560">   36</a></span>&#160;        <span class="keyword">typedef</span> container::const_reverse_iterator <a class="code" href="class_json_box_1_1_object.htm#aa2817625fc0517506fa48b1d83ec4560">const_reverse_iterator</a>;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keyword">explicit</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a>(<span class="keyword">const</span> key_compare &amp;comp = key_compare(), <span class="keyword">const</span> allocator_type &amp;alloc = allocator_type());</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIterator&gt;</div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#ae2e0c692da57e0305397710dbd5342a2">   41</a></span>&#160;        <span class="keyword">explicit</span> <a class="code" href="class_json_box_1_1_object.htm#ae2e0c692da57e0305397710dbd5342a2">Object</a>(InputIterator first, InputIterator last, <span class="keyword">const</span> key_compare &amp;comp = key_compare(), <span class="keyword">const</span> allocator_type &amp;alloc = allocator_type()) : data(first, last, comp, alloc) {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        }</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <a class="code" href="class_json_box_1_1_object.htm">Object</a>(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;other);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;other);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;rhs) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;rhs) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;rhs) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordtype">bool</span> operator&lt;=(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;rhs) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;rhs) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordtype">bool</span> operator&gt;=(<span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;rhs) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        allocator_type get_allocator() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        mapped_type &amp;operator[](<span class="keyword">const</span> key_type &amp;key);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        iterator begin();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        const_iterator begin() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        iterator end();</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        const_iterator end() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        reverse_iterator rbegin();</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        const_reverse_iterator rbegin() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        reverse_iterator rend();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        const_reverse_iterator rend() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordtype">bool</span> empty() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        size_type size() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        size_type max_size() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordtype">void</span> clear();</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        std::pair&lt;iterator, bool&gt; insert(const_reference value);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        iterator insert(iterator hint, const_reference value);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIterator&gt;</div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a7a3ab92f33ed4153afdbcce83421cf13">   93</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="class_json_box_1_1_object.htm#a7a3ab92f33ed4153afdbcce83421cf13">insert</a>(InputIterator first, InputIterator last) {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            data.insert(first, last);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordtype">void</span> erase(iterator position);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordtype">void</span> erase(iterator first, iterator last);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        size_type erase(<span class="keyword">const</span> key_type &amp;key);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordtype">void</span> swap(<a class="code" href="class_json_box_1_1_object.htm">Object</a> &amp;other);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        size_type count(<span class="keyword">const</span> key_type &amp;key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        iterator find(<span class="keyword">const</span> key_type &amp;key);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        const_iterator find(<span class="keyword">const</span> key_type &amp;key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        std::pair&lt;iterator, iterator&gt; equal_range(<span class="keyword">const</span> key_type &amp;key);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        std::pair&lt;const_iterator, const_iterator&gt; equal_range(<span class="keyword">const</span> key_type &amp;key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        iterator lower_bound(<span class="keyword">const</span> key_type &amp;key);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        const_iterator lower_bound(<span class="keyword">const</span> key_type &amp;key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        iterator upper_bound(<span class="keyword">const</span> key_type &amp;key);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        const_iterator upper_bound(<span class="keyword">const</span> key_type &amp;key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        key_compare key_comp() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="class_json_box_1_1_object.htm#a4604f99db1f3a2f8f78974eb1e08457d">  125</a></span>&#160;        container <a class="code" href="class_json_box_1_1_object.htm#a4604f99db1f3a2f8f78974eb1e08457d">data</a>;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    };</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    std::ostream&amp; <a class="code" href="namespace_json_box.htm#a5126bcbc4c7ddcc1e28ee07e41c7e603">operator&lt;&lt;</a>(std::ostream&amp; output, <span class="keyword">const</span> <a class="code" href="class_json_box_1_1_object.htm">Object</a>&amp; o);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="class_json_box_1_1_object_htm_ae2e0c692da57e0305397710dbd5342a2"><div class="ttname"><a href="class_json_box_1_1_object.htm#ae2e0c692da57e0305397710dbd5342a2">JsonBox::Object::Object</a></div><div class="ttdeci">Object(InputIterator first, InputIterator last, const key_compare &amp;comp=key_compare(), const allocator_type &amp;alloc=allocator_type())</div><div class="ttdef"><b>Definition:</b> Object.h:41</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_aadf8e44ece33131b4dc66e754861ef6f"><div class="ttname"><a href="class_json_box_1_1_object.htm#aadf8e44ece33131b4dc66e754861ef6f">JsonBox::Object::container</a></div><div class="ttdeci">std::map&lt; std::string, Value &gt; container</div><div class="ttdef"><b>Definition:</b> Object.h:21</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a61664a7f7076b0d03ac2dd132242cdf5"><div class="ttname"><a href="class_json_box_1_1_object.htm#a61664a7f7076b0d03ac2dd132242cdf5">JsonBox::Object::key_compare</a></div><div class="ttdeci">container::key_compare key_compare</div><div class="ttdef"><b>Definition:</b> Object.h:27</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm"><div class="ttname"><a href="class_json_box_1_1_object.htm">JsonBox::Object</a></div><div class="ttdef"><b>Definition:</b> Object.h:19</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a797d470c48c6b0281709552bd2f9c0ab"><div class="ttname"><a href="class_json_box_1_1_object.htm#a797d470c48c6b0281709552bd2f9c0ab">JsonBox::Object::mapped_type</a></div><div class="ttdeci">container::mapped_type mapped_type</div><div class="ttdef"><b>Definition:</b> Object.h:23</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a0af500e05499df07492b7a05cb08e324"><div class="ttname"><a href="class_json_box_1_1_object.htm#a0af500e05499df07492b7a05cb08e324">JsonBox::Object::reverse_iterator</a></div><div class="ttdeci">container::reverse_iterator reverse_iterator</div><div class="ttdef"><b>Definition:</b> Object.h:35</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a6059e945d01f81527dccfef0c86e2f91"><div class="ttname"><a href="class_json_box_1_1_object.htm#a6059e945d01f81527dccfef0c86e2f91">JsonBox::Object::key_type</a></div><div class="ttdeci">container::key_type key_type</div><div class="ttdef"><b>Definition:</b> Object.h:22</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a1a6edfd0989da0b09b711e051a34e6b3"><div class="ttname"><a href="class_json_box_1_1_object.htm#a1a6edfd0989da0b09b711e051a34e6b3">JsonBox::Object::pointer</a></div><div class="ttdeci">container::pointer pointer</div><div class="ttdef"><b>Definition:</b> Object.h:31</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a4d23817b5d11f016245351ccd4a5d7e2"><div class="ttname"><a href="class_json_box_1_1_object.htm#a4d23817b5d11f016245351ccd4a5d7e2">JsonBox::Object::const_iterator</a></div><div class="ttdeci">container::const_iterator const_iterator</div><div class="ttdef"><b>Definition:</b> Object.h:34</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a2effd337c3d0407c3d0949744f2c5545"><div class="ttname"><a href="class_json_box_1_1_object.htm#a2effd337c3d0407c3d0949744f2c5545">JsonBox::Object::const_pointer</a></div><div class="ttdeci">container::const_pointer const_pointer</div><div class="ttdef"><b>Definition:</b> Object.h:32</div></div>
<div class="ttc" id="namespace_json_box_htm_a5126bcbc4c7ddcc1e28ee07e41c7e603"><div class="ttname"><a href="namespace_json_box.htm#a5126bcbc4c7ddcc1e28ee07e41c7e603">JsonBox::operator&lt;&lt;</a></div><div class="ttdeci">JSONBOX_EXPORT std::ostream &amp; operator&lt;&lt;(std::ostream &amp;output, const Array &amp;a)</div><div class="ttdef"><b>Definition:</b> Array.cpp:175</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a890f6abe2e10996f95c0741fd5922109"><div class="ttname"><a href="class_json_box_1_1_object.htm#a890f6abe2e10996f95c0741fd5922109">JsonBox::Object::iterator</a></div><div class="ttdeci">container::iterator iterator</div><div class="ttdef"><b>Definition:</b> Object.h:33</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_aa2817625fc0517506fa48b1d83ec4560"><div class="ttname"><a href="class_json_box_1_1_object.htm#aa2817625fc0517506fa48b1d83ec4560">JsonBox::Object::const_reverse_iterator</a></div><div class="ttdeci">container::const_reverse_iterator const_reverse_iterator</div><div class="ttdef"><b>Definition:</b> Object.h:36</div></div>
<div class="ttc" id="_value_8h_htm"><div class="ttname"><a href="_value_8h.htm">Value.h</a></div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_ac7639dbcd746783c3f591afec84ce5f8"><div class="ttname"><a href="class_json_box_1_1_object.htm#ac7639dbcd746783c3f591afec84ce5f8">JsonBox::Object::difference_type</a></div><div class="ttdeci">container::difference_type difference_type</div><div class="ttdef"><b>Definition:</b> Object.h:26</div></div>
<div class="ttc" id="namespace_json_box_htm"><div class="ttname"><a href="namespace_json_box.htm">JsonBox</a></div><div class="ttdef"><b>Definition:</b> Array.h:9</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a716b7bdad7264a8fe6ebbcc2f6472491"><div class="ttname"><a href="class_json_box_1_1_object.htm#a716b7bdad7264a8fe6ebbcc2f6472491">JsonBox::Object::allocator_type</a></div><div class="ttdeci">container::allocator_type allocator_type</div><div class="ttdef"><b>Definition:</b> Object.h:28</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a3a345b2cb61d47c4ff95d023285004d7"><div class="ttname"><a href="class_json_box_1_1_object.htm#a3a345b2cb61d47c4ff95d023285004d7">JsonBox::Object::reference</a></div><div class="ttdeci">container::reference reference</div><div class="ttdef"><b>Definition:</b> Object.h:29</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_aaf4d7917fd2d7ac1f5541c77bd6ac9b3"><div class="ttname"><a href="class_json_box_1_1_object.htm#aaf4d7917fd2d7ac1f5541c77bd6ac9b3">JsonBox::Object::const_reference</a></div><div class="ttdeci">container::const_reference const_reference</div><div class="ttdef"><b>Definition:</b> Object.h:30</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_aa0f5cdac313f9e63c965a1a291fa8164"><div class="ttname"><a href="class_json_box_1_1_object.htm#aa0f5cdac313f9e63c965a1a291fa8164">JsonBox::Object::value_type</a></div><div class="ttdeci">container::value_type value_type</div><div class="ttdef"><b>Definition:</b> Object.h:24</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a4604f99db1f3a2f8f78974eb1e08457d"><div class="ttname"><a href="class_json_box_1_1_object.htm#a4604f99db1f3a2f8f78974eb1e08457d">JsonBox::Object::data</a></div><div class="ttdeci">container data</div><div class="ttdef"><b>Definition:</b> Object.h:125</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a36fe38b4af40f3a0c4db734de46ab881"><div class="ttname"><a href="class_json_box_1_1_object.htm#a36fe38b4af40f3a0c4db734de46ab881">JsonBox::Object::size_type</a></div><div class="ttdeci">container::size_type size_type</div><div class="ttdef"><b>Definition:</b> Object.h:25</div></div>
<div class="ttc" id="class_json_box_1_1_object_htm_a7a3ab92f33ed4153afdbcce83421cf13"><div class="ttname"><a href="class_json_box_1_1_object.htm#a7a3ab92f33ed4153afdbcce83421cf13">JsonBox::Object::insert</a></div><div class="ttdeci">void insert(InputIterator first, InputIterator last)</div><div class="ttdef"><b>Definition:</b> Object.h:93</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Apr 3 2015 23:56:53 for Json Box by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.9.1
</small></address>
</body>
</html>
